1. secure the base_link to the world (change virtual_joint to dummy_joint)
    - file "si75_description.srdf"
        from <virtual_joint name="virtual_joint" type="fixed" parent_frame="world" child_link="base_link" />
        to   <virtual_joint name="virtual_joint" type="fixed" parent_frame="world" child_link="world" />
    - file "si75_description.urdf"
        @line 8:   
            <link name="world"/>

            <joint name="virtual_joint" type="fixed">
              <parent link="world"/>
              <child link="base_link"/>
            </joint>

2. add gazebo transmission for gripper into .urdf file
  <transmission name="trans_joint_finger_left">
    <type>transmission_interface/SimpleTransmission</type>
    <joint name="joint_finger_left">
      <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
    </joint>
    <actuator name="joint_finger_left_motor">
      <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
      <mechanicalReduction>1</mechanicalReduction>
    </actuator>
  </transmission>

  <transmission name="trans_joint_finger_right">
    <type>transmission_interface/SimpleTransmission</type>
    <joint name="joint_finger_right">
      <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
    </joint>
    <actuator name="joint_finger_right_motor">
      <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
      <mechanicalReduction>1</mechanicalReduction>
    </actuator>
  </transmission>

3. add gripper controller into ros_controllers.yaml
  controller_list:
  .
  .
  .
  - name: gripper_controller
    action_ns: follow_joint_trajectory
    type: FollowJointTrajectory
    default: True
    parallel: True
    joints:
      - joint_finger_left
      - joint_finger_right
    .
    .
    .
  gripper_controller:
    type: effort_controllers/JointTrajectoryController
    joints:
        - joint_finger_left
        - joint_finger_right
    constraints:
        goal_time: 0.6
        stopped_velocity_tolerance: 0
    gains:
        joint_finger_left: {p: 5.0, i: 0.0, d: 3.0}
        joint_finger_right: {p: 5.0, i: 0.0, d: 1.0}
    goal_tolerance: 0.01
    stalled_velocity_threshold: 0.01
    stall_timeout: 0.2
    state_publish_rate: 25

4. add gripper controller into ros_controllers.launch
    @line 9:
        from    output="screen" args="arm_controller joint_state_controller"/>
        to      output="screen" args="arm_controller gripper_controller joint_state_controller"/>    

5. Add poses of the hand into "si75_description.srdf"
    @line 67:
    <group_state name="close" group="hand">
        <joint name="joint_finger_left" value="0" />
        <joint name="joint_finger_right" value="0" />
    </group_state>
    <group_state name="open" group="hand">
        <joint name="joint_finger_left" value="-0.01" />
        <joint name="joint_finger_right" value="-0.01" />
    </group_state>

### Test the gripper ###

6. change joint's color (gazebo) into the "si75_description.urdf"
    <gazebo reference="base_link">
      <selfCollide>true</selfCollide>
      <!--<material>Gazebo/Grey</material>-->
    </gazebo>
  
    <gazebo reference="link0">
      <selfCollide>true</selfCollide>
      <material>Gazebo/Grey</material>
    </gazebo>

## Add Scence Objects ##
7. change grid size to 0.20 [m]
8. creat Scence Objects
    - Cylinder_0(0.05,0.2), [0.40, 0.40, 0.10]
    - Cylinder_1(0.05,0.2), [-0.40, 0.40, 0.10]
    - Cylinder_2(0.05,0.2), [0.40, -0.40, 0.10]
    - Cylinder_3(0.05,0.2), [-0.40, -0.400, 0.10]
9. Export Scence Objects as "4_pegs"
10. Import Scence Objects
11. Publish Scence Objects

12. add si75_commnader package (edit package.xml)
	- add folder "src"
	- add folder "commander_scripts

13. Moveit! Commander 
    $ roscd si75_commnader
    $ rosrun moveit_commander moveit_commander_cmdline.py
    > help
    > ground
        - publish the ground and export the Scence

    > use si75_arm
    > go
    > current
    
    - moveit_commander_script
    - add more peg
    - moveit_commander_script

14. speed up the robot (change joint_limits.yaml)

15. test movement around the Scence
    - Exercise

16. MoveGroup APIs
    - Pre-Poses
    - Add more Scence Objects
    - Exercise
    - Cartesian Paths
    - Exercise

17. Pick and Place
    - git clone https://github.com/ros-planning/moveit_tutorials.git -b melodic-devel
    - catkin_make
